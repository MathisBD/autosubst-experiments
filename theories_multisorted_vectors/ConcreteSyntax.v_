From MPrototype Require Import Prelude Sig.
From MPrototype Require ParamSyntax.
Module P := ParamSyntax.

(*********************************************************************************)
(** *** Concrete syntax. *)
(*********************************************************************************)

Unset Elimination Schemes. 

Inductive ty : Set :=
| var_ty : nat -> ty
| arr : ty -> ty -> ty
| all : ty -> ty.
 
Inductive tm : Set :=
| app : tm -> tm -> tm
| tapp : tm -> ty -> tm
| vt : vl -> tm

with vl : Set :=
| var_vl : nat -> vl
| lam : ty -> tm -> vl
| tlam : tm -> vl.

Set Elimination Schemes.

Scheme ty_ind := Induction for ty Sort Prop.
Scheme tm_ind := Induction for tm Sort Prop 
  with vl_ind := Induction for vl Sort Prop.
Combined Scheme tm_vl_ind from tm_ind, vl_ind.

(*Scheme ty_sind := Induction for ty Sort SProp.
Scheme tm_sind := Induction for tm Sort SProp 
  with vl_sind := Induction for vl Sort SProp.
Combined Scheme tm_vl_sind from tm_sind, vl_sind.*)

(*********************************************************************************)
(** *** Concrete renamings. *)
(*********************************************************************************)

Fixpoint rename_ty (rty : ren) (t : ty) : ty :=
  match t with 
  | var_ty i => var_ty (rty i)
  | arr t1 t2 =>arr (rename_ty rty t1) (rename_ty rty t2)
  | all t => all (rename_ty (rup rty) t)
  end.

Fixpoint rename_tm (rty : ren) (rvl : ren) (t : tm) : tm :=
  match t with 
  | app t1 t2 => app (rename_tm rty rvl t1) (rename_tm rty rvl t2)
  | tapp t1 t2 => tapp (rename_tm rty rvl t1) (rename_ty rty t2)
  | vt v => vt (rename_vl rty rvl v)
  end

with rename_vl (rty : ren) (rvl : ren) (t : vl) : vl :=
  match t with 
  | var_vl i => var_vl (rvl i)
  | lam t1 t2 => lam (rename_ty rty t1) (rename_tm rty (rup rvl) t2)
  | tlam t => tlam (rename_tm (rup rty) rvl t)
  end.

(*********************************************************************************)
(** *** Concrete substitutions. *)
(*********************************************************************************)

(** [subst T] represents substitutions on terms of sort [T]. *)
Definition subst T := nat -> T.

Definition scons {T} (t : T) (s : subst T) : subst T :=
  fun i =>
    match i with 
    | 0 => t 
    | S i => s i
    end. 

Definition srcomp_ty (s : subst ty) (rty : ren) : subst ty :=
  fun i => rename_ty rty (s i).

Definition srcomp_tm (s : subst tm) (rty rvl : ren) : subst tm :=
  fun i => rename_tm rty rvl (s i).

Definition srcomp_vl (s : subst vl) (rty rvl : ren) : subst vl :=
  fun i => rename_vl rty rvl (s i).

Fixpoint substitute_ty (sty : subst ty) (t : ty) : ty :=
  match t with 
  | var_ty i => sty i 
  | arr t1 t2 => arr (substitute_ty sty t1) (substitute_ty sty t2)
  | all t => 
    let sty := scons (var_ty 0) (srcomp_ty sty rshift) in
    all (substitute_ty sty t)
  end.

Fixpoint substitute_tm (sty : subst ty) (svl : subst vl) (t : tm) : tm :=
  match t with 
  | app t1 t2 => app (substitute_tm sty svl t1) (substitute_tm sty svl t2)
  | tapp t1 t2 => tapp (substitute_tm sty svl t1) (substitute_ty sty t2) 
  | vt v => vt (substitute_vl sty svl v)
  end

with substitute_vl (sty : subst ty) (svl : subst vl) (t : vl) : vl :=
  match t with 
  | var_vl i => svl i
  | lam t1 t2 => 
    let svl := scons (var_vl 0) (srcomp_vl svl rid rshift) in
    lam (substitute_ty sty t1) (substitute_tm sty svl t2)
  | tlam t => 
    let sty := scons (var_ty 0) (srcomp_ty sty rshift) in 
    let svl := srcomp_vl svl rshift rid in 
    tlam (substitute_tm sty svl t)
  end.

(*********************************************************************************)
(** *** Signature. *)
(*********************************************************************************)

Module ConcreteSignature.

  Definition nbase := 0.

  Definition base_type (b : fin nbase) : Type :=
    match b with end.
  
  Definition nsort := 3.

  Definition Sty : fin nsort := finO.
  Definition Stm : fin nsort := finS finO.
  Definition Svl : fin nsort := finS (finS finO).
  
  Definition nctor (s : fin nsort) : nat :=
    vec_nth [- 2 ; 3 ; 2 -] s.

  Definition Carr : fin (nctor Sty) := finO.
  Definition Call : fin (nctor Sty) := finS finO.

  Definition Capp : fin (nctor Stm) := finO.
  Definition Ctapp : fin (nctor Stm) := finS finO.
  Definition Cvt : fin (nctor Stm) := finS (finS finO).

  Definition Clam : fin (nctor Svl) := finO.
  Definition Ctlam : fin (nctor Svl) := finS finO.

  Definition ctor_type (s : fin nsort) (c : fin (nctor s)) : list (@arg_ty nbase nsort) := 
    let ty_ctors := 
      [- [ AT_term Sty ; AT_term Sty ] ; [ AT_bind Sty (AT_term Sty) ] -]%vec
    in
    let tm_ctors :=
      [- [ AT_term Stm ; AT_term Stm ] ; [ AT_term Stm ; AT_term Sty ] ; [ AT_term Svl ] -]%vec
    in
    let vl_ctors :=
      [- [ AT_term Sty ; AT_bind Svl (AT_term Stm) ] ; [ AT_bind Sty (AT_term Stm) ] -]%vec
    in
    let ctors : hvec nsort (fun s => vec (list (@arg_ty nbase nsort)) (nctor s)) := 
      [= ty_ctors ; tm_ctors ; vl_ctors =]%hvec 
    in
    vec_nth (hvec_nth ctors s) c.

  Definition sig : signature := 
    Build_signature nbase base_type nsort nctor ctor_type.

End ConcreteSignature.
Import ConcreteSignature.
#[local] Existing Instance sig.

(*********************************************************************************)
(** *** Custom induction principle on level one terms. *)
(*********************************************************************************)

Section CustomInd.
  Context (P : forall m, P.expr (Kt m) -> Prop).
  
  Context (Hvar : forall m i, P m (P.E_var i)).

  Context (Harr : forall t1 t2, P Sty t1 -> P Sty t2 -> 
    P Sty (P.E_ctor (m := Sty) Carr (P.E_al_cons (P.E_aterm t1) (P.E_al_cons (P.E_aterm t2) P.E_al_nil)))).
  Context (Hall : forall t, P Sty t -> 
    P Sty (P.E_ctor (m := Sty) Call (P.E_al_cons (P.E_abind Sty (P.E_aterm t)) P.E_al_nil))).

  Context (Happ : forall t1 t2, P Stm t1 -> P Stm t2 ->
    P Stm (P.E_ctor (m := Stm) Capp (P.E_al_cons (P.E_aterm t1) (P.E_al_cons (P.E_aterm t2) P.E_al_nil)))).
  Context (Htapp : forall t1 t2, P Stm t1 -> P Sty t2 ->
    P Stm (P.E_ctor (m := Stm) Ctapp (P.E_al_cons (P.E_aterm t1) (P.E_al_cons (P.E_aterm t2) P.E_al_nil)))).
  Context (Hvt : forall t, P Svl t ->
    P Stm (P.E_ctor (m := Stm) Cvt (P.E_al_cons (P.E_aterm t) P.E_al_nil))).

  Context (Hlam : forall t1 t2, P Sty t1 -> P Stm t2 ->
    P Svl (P.E_ctor (m := Svl) Clam (P.E_al_cons (P.E_aterm t1) (P.E_al_cons (P.E_abind Svl (P.E_aterm t2)) P.E_al_nil)))).
  Context (Htlam : forall t1, P Stm t1 ->
    P Svl (P.E_ctor (m := Svl) Ctlam (P.E_al_cons (P.E_abind Sty (P.E_aterm t1)) P.E_al_nil))).

  (*Tactic Notation "red_vec_nth" "in" hyp(H) :=
    cbv in H ;
    repeat match type of H with 
    | context[ vec_nth (vcons ?x ?xs) finO ] =>
      change (vec_nth (vcons x xs) finO) with x in H
    | context[ vec_nth (vcons ?x ?xs) (finS ?i) ] =>
      change (vec_nth (vcons x xs) (finS i)) with (vec_nth xs i) in H
    | context[ hvec_nth (hcons ?x ?xs) finO ] =>
      change (hvec_nth (hcons x xs) finO) with x in H
    | context[ hvec_nth (hcons ?x ?xs) (finS ?i) ] =>
      change (hvec_nth (hcons x xs) (finS i)) with (vec_nth xs i) in H
    end.*)

  Lemma custom_ind {m} : forall t : P.expr (Kt m), P m t.
  Proof.
  revert m. apply P.size_ind. intros m t. repeat depelim m ; depelim t.
  all: try solve [ intros ; apply Hvar ].
  - cbn in c. repeat depelim c.
    + cbn in t.
      pattern t. revert t. apply (@P.inv_args_cons sig). intros a al.
      pattern a. revert a. apply (@P.inv_arg_term sig). intros t'.
      pattern al. revert al. apply (@P.inv_args_cons sig). intros a' al.
      pattern al. revert al. apply (@P.inv_args_nil sig).
      pattern a'. revert a'. apply (@P.inv_arg_term sig). intros t''.
      intros IH. apply Harr ; apply IH ; cbn ; unfold Sty ; lia.
 (*   + cbv in t. red_vec_nth in t. 
      depelim t. depelim t1. depelim t2. depelim t1. 
      apply Hall ; apply IH ; cbn ; unfold Sty ; lia.
  - depelim c.
    + depelim t. depelim t1. depelim t2. depelim t2_1. depelim t2_2. 
      apply Happ ; apply IH ; cbn ; lia.
    + depelim t. depelim t1. depelim t2. depelim t2_1. depelim t2_2. 
      apply Htapp ; apply IH ; cbn ; lia.
    + depelim t. depelim t1. depelim t2. 
      apply Hvt ; apply IH ; cbn ; lia.
  - depelim c.
    + depelim t. depelim t1. depelim t2. depelim t2_1. depelim t2_2. depelim t2_1.
      apply Hlam ; apply IH ; cbn ; lia.
    + depelim t. depelim t1. depelim t2. depelim t1. 
      apply Htlam ; apply IH ; cbn ; lia.
  Qed. *)
  Admitted.

End CustomInd.

(*********************************************************************************)
(** *** Well formed terms. *)
(*********************************************************************************)

(*

1. Define [occurs] and [binds]. At this point we would define 
   [has_var m := exists m', occurs m m' /\ binds m m']
2. Sanity check: [binds m m' -> occurs m m'].
3. [has_var m] is simply [exists m', binds m m'].

*)

(** [my_inv H] extends [inversion H] by running some cleanup : it simplifies
    equations of the form [existT P x y = existT P x y'] and runs [subst]. *)
Ltac my_inv H :=
  inversion H ; subst ;
  repeat match goal with 
  | [ H' : existT _ _ _ = existT _ _ _ |- _ ] =>
    apply inj_right_pair in H' ; subst 
  end.

Section Wf.
  Context {has_var : fin nsort -> SProp}.
  Context {occurs : fin nsort -> fin nsort -> SProp}.
  Context (occurs_refl : forall s, occurs s s).
  Context (occurs_trans : forall s1 s2 s3, occurs s1 s2 -> occurs s2 s3 -> occurs s1 s3).
  
  (** [wf t] expresses the fact that [t] only contains variables 
      at sorts [m] such that [has_var m]. 
      
      As [wf t] lives in [SProp], we don't have access to the [depelim] tactic.
      Instead we use [my_inv]. *)
  Inductive wf : forall {k}, P.expr k -> SProp :=
  | wf_var m i : has_var m -> wf (P.E_var (m := m) i)
  | wf_ctor m (c : fin (nctor m)) al : wf al -> wf (P.E_ctor c al)
  | wf_al_nil : wf P.E_al_nil 
  | wf_al_cons {ty tys} (a : P.expr (Ka ty)) (al : P.expr (Kal tys)) : 
      wf a -> wf al -> wf (P.E_al_cons a al)
  | wf_abase b x : wf (P.E_abase b x)
  | wf_aterm {m} (t : P.expr (Kt m)) : wf t -> wf (P.E_aterm t)
  | wf_abind {ty} m (a : P.expr (Ka ty)) :
    wf a -> wf (P.E_abind m a).

  (** * Inversion lemmas. *)

  Lemma wf_var_inv {m} {i} : wf (P.E_var (m := m) i) -> has_var m .
  Proof. intros H. my_inv H ; assumption. Qed.

  Lemma wf_ctor_inv {m} {c : fin (nctor m)} {al} : wf (P.E_ctor c al) -> wf al.
  Proof. intros H. my_inv H ; assumption. Qed.
  
  Lemma wf_al_cons_inv1 {ty} {tys} {a : P.expr (Ka ty)} {al : P.expr (Kal tys)} :
    wf (P.E_al_cons a al) -> wf a.
  Proof. intros H. my_inv H ; assumption. Qed. 

  Lemma wf_al_cons_inv2 {ty} {tys} {a : P.expr (Ka ty)} {al : P.expr (Kal tys)} :
    wf (P.E_al_cons a al) -> wf al.
  Proof. intros H. my_inv H ; assumption. Qed.

  Lemma wf_aterm_inv {m} {t : P.expr (Kt m)} : wf (P.E_aterm t) -> wf t.
  Proof. intros H. my_inv H ; assumption. Qed.

  Lemma wf_abind_inv {ty} {m} {a : P.expr (Ka ty)} : 
    wf (P.E_abind m a) -> wf a.
  Proof. intros H. my_inv H ; assumption. Qed.

  (** * Well formed renamings/substitutions. *)

  Lemma wf_rename {k} r (t : P.expr k) : 
    wf t -> wf (P.rename r t).
  Proof.
  #[local] Hint Extern 1 => constructor : core.
  intros H. induction t in H, r |- * ; simp rename.
  all: solve [ my_inv H ; auto ].
  Qed.

  Definition wf_subst {m} (s : P.subst m) : SProp :=
    forall i, wf (s i).

  Lemma wf_scons {m} (t : P.expr (Kt m)) (s : P.subst m) : 
    wf t -> wf_subst s -> wf_subst (P.scons t s).
  Proof. intros Ht Hs i. destruct i ; now cbn. Qed. 

  (** A vector of substitutions is well-formed for a given sort [mt] of terms. *)
  Definition wf_vsubst (s : P.vsubst) (mt : fin nsort) : SProp :=
    forall m, has_var m -> occurs m mt -> wf_subst (hvec_nth s m).

  Lemma wf_vsubst_occurs m m' s :
    occurs m m' -> wf_vsubst s m' -> wf_vsubst s m.
  Proof. 
  intros Hm H m'' H1 H2. apply H ; try assumption. eapply occurs_trans ; eauto. 
  Qed.  

  Lemma wf_vsup m mt s : wf_vsubst s mt -> wf_vsubst (P.vsup m s) mt.
  Proof.
  intros Hs. intros m' Hm' Hocc i. unfold P.vsup. simp hvec_nth. 
  destruct (eq_dec m m').
  - subst. apply wf_scons.
    + now constructor.
    + intros i'. unfold P.svrcomp. apply wf_rename. now apply Hs.
  - unfold P.svrcomp. apply wf_rename. now apply Hs.
  Qed.

End Wf.

(** * Specialization of [wf] to the sorts of system F. *)

Inductive STrue : SProp := SI.
Inductive SFalse : SProp :=.

Definition has_var (m : fin nsort) : SProp := 
  vec_nth [- STrue ; SFalse ; STrue -] m. 
 
(* Should be reflexive and transitive. *)
Definition occurs (m m' : fin nsort) : SProp :=
  let matrix :=
    [- [- STrue  ; STrue  ; STrue  -]
    ;  [- SFalse ; STrue  ; STrue -]
    ;  [- SFalse ; STrue  ; STrue  -] -]%vec
  in
  vec_nth (vec_nth matrix m) m'.

Lemma inj_left_sigma {A : Type} {x x' : A} {P : A -> Type} {y : P x} {y' : P x'} :
  {| pr1 := x ; pr2 := y |} = {| pr1 := x' ; pr2 := y' |} ->
  x = x'.
Proof. intros H. now depelim H. Qed. 

Lemma inv_fin_zero (P : fin 0 -> SProp) :
  forall i, P i.
Proof. intros i. dependent destruction i. Qed.

Lemma inv_fin_succ n (P : fin (S n) -> SProp) :
  P finO ->
  (forall i, P (finS i)) ->
  forall i, P i.
Proof.
intros H1 H2 i. depelim i.
- my_inv H. apply H1.
- my_inv H. apply H2. 
Qed.

Ltac2 rec cases_fin_rec (i : ident) : unit :=
  let my_revert (i : ident) :=
    ltac1:(i |- generalize dependent i ; intros i ; pattern i ; revert i) (Ltac1.of_ident i) 
  in
  match! Control.hyp i with 
  | fin 0 => 
    my_revert i ; apply inv_fin_zero ; intros i
  | fin (S _) => 
    my_revert i ; apply inv_fin_succ (*; 
    Control.dispatch [ (fun () => ()) ; (fun () => intros i ; cases_fin_rec i)]*)
  | fin _ => ()
  end.
  
Ltac2 Notation "cases_fin" ids(list1(ident)) := List.iter cases_fin_rec ids.
  
Tactic Notation "cases_fin" ident(i0) := 
  let tac := 
    ltac2:(i0 |- 
      cases_fin_rec (Option.get (Ltac1.to_ident i0))) 
  in 
  tac i0.

Tactic Notation "cases_fin" ident(i0) ident(i1) := 
  let tac := 
    ltac2:(i0 i1 |- 
      cases_fin_rec (Option.get (Ltac1.to_ident i0)) ;
      cases_fin_rec (Option.get (Ltac1.to_ident i1))) 
  in 
  tac i0 i1.

Tactic Notation "cases_fin" ident(i0) ident(i1) ident(i2) := 
  let tac := 
    ltac2:(i0 i1 i2 |- 
      cases_fin_rec (Option.get (Ltac1.to_ident i0)) ;
      cases_fin_rec (Option.get (Ltac1.to_ident i1)) ;
      cases_fin_rec (Option.get (Ltac1.to_ident i2))) 
  in 
  tac i0 i1 i2.

Lemma occurs_refl m : occurs m m.
Proof. cbv in m. cases_fin m. 
let tac := ltac2:(m |- cases_fin_rec (Option.get (Ltac1.to_constr m))) in tac m. ; constructor. Qed.

Lemma occurs_trans m1 m2 m3 : occurs m1 m2 -> occurs m2 m3 -> occurs m1 m3.
Proof. cbv in m1, m2, m3. cases_fin m1 ; cases_fin m2 ; cases_fin m3 ; auto. Qed.

Definition wf0 {k} (t : P.expr k) : SProp := @wf has_var k t.
Definition wf0_subst {m} (s : P.subst m) : SProp := @wf_subst has_var m s.
Definition wf0_vsubst (s : P.vsubst) (m : sort) : SProp := @wf_vsubst has_var occurs s m.

Lemma wf0_substitute {m} (s : P.vsubst) (t : P.expr (Kt m)) :
  wf0_vsubst s m -> wf0 t -> wf0 (P.substitute s t).
Proof.
(*revert s. pattern t. revert m t. apply custom_ind.
all: intros ; cbn.
- apply H.
  + apply wf_var_inv in H0. assumption. 
  + now destruct m.
- apply wf_ctor_inv in H2. pose proof (H3 := wf_al_cons_inv1 H2).
  apply wf_al_cons_inv2 in H2. apply wf_aterm_inv in H3.
  apply wf_al_cons_inv1, wf_aterm_inv in H2.
  repeat constructor.
  + now apply H.
  + now apply H0.
- repeat constructor. apply H.
  + now apply wf_vsup.
  + admit.
- admit.
- admit.
- repeat constructor. apply H.
  + eapply wf_vsubst_occurs ; eauto using occurs_trans ; reflexivity.
  + apply wf_ctor_inv, wf_al_cons_inv1, wf_aterm_inv in H1. assumption.
- repeat constructor. 
  + apply H.
    * eapply wf_vsubst_occurs ; eauto using occurs_trans ; reflexivity.
    * admit.
  + apply H0.
    * apply wf_vsup. eapply wf_vsubst_occurs ; eauto using occurs_trans ; reflexivity.
    * admit.
- repeat constructor. apply H.
  + apply wf_vsup.        *)
Admitted.

(*********************************************************************************)
(** *** Reification. *)
(*********************************************************************************)

Fixpoint reify_ty (t : ty) : P.expr (Kt Sty) :=
  match t with 
  | var_ty i => P.E_var i
  | arr t1 t2 => 
    P.E_ctor (m := Sty) Carr 
      (P.E_al_cons (P.E_aterm (reify_ty t1)) (P.E_al_cons (P.E_aterm (reify_ty t2)) P.E_al_nil))
  | all t => 
    P.E_ctor (m := Sty) Call 
      (P.E_al_cons (P.E_abind Sty (P.E_aterm (reify_ty t))) P.E_al_nil)
  end.

Fixpoint reify_tm (t : tm) : P.expr (Kt Stm) :=
  match t with 
  | app t1 t2 =>
    P.E_ctor (m := Stm) Capp (P.E_al_cons (P.E_aterm (reify_tm t1)) (P.E_al_cons (P.E_aterm (reify_tm t2)) P.E_al_nil))
  | tapp t1 t2 =>
    P.E_ctor (m := Stm) Ctapp (P.E_al_cons (P.E_aterm (reify_tm t1)) (P.E_al_cons (P.E_aterm (reify_ty t2)) P.E_al_nil))
  | vt t =>
    P.E_ctor (m := Stm) Cvt (P.E_al_cons (P.E_aterm (reify_vl t)) P.E_al_nil)
  end

with reify_vl (t : vl) : P.expr (Kt Svl) :=
  match t with 
  | var_vl i => P.E_var i
  | lam t1 t2 =>
    P.E_ctor (m := Svl) Clam 
      (P.E_al_cons (P.E_aterm (reify_ty t1)) (P.E_al_cons (P.E_abind Svl (P.E_aterm (reify_tm t2))) P.E_al_nil))
  | tlam t =>
    P.E_ctor (m := Svl) Ctlam 
      (P.E_al_cons (P.E_abind Sty (P.E_aterm (reify_tm t))) P.E_al_nil)
  end.

Lemma wf_reify_ty t : wf0 (reify_ty t).
Proof.
#[local] Hint Extern 1 => constructor : core.
induction t ; cbn ; auto.
Qed.

(*Lemma wf_reify_tm_vl : (forall t, wf0 (reify_tm t)) * (forall v, wf0 (reify_vl v)).
Proof.
apply tm_vl_rect ; intros ; cbn.
all: repeat constructor ; solve [ assumption | apply wf_reify_ty ].
Qed.

Lemma wf_reify_tm t : wf0 (reify_tm t).
Proof. now apply wf_reify_tm_vl. Qed.

Lemma wf_reify_vl t : wf0 (reify_vl t).
Proof. now apply wf_reify_tm_vl. Qed.
    
(* Testing... *)
Lemma wf_reify_subst_tm (s : nat -> tm) : wf0_subst (fun i => reify_tm (s i)).
Proof. intros i. apply wf_reify_tm. Qed.*)

(*********************************************************************************)
(** *** Evaluation. *)
(*********************************************************************************)

Definition eval_sort (s : sort) : Type :=
  match s with 
  | Sty => ty 
  | Stm => tm 
  | Svl => vl
  end.

Fixpoint eval_arg_ty (ty : @arg_ty base sort) : Type :=
  match ty with 
  | AT_base b => base_type b 
  | AT_term s => eval_sort s
  | AT_bind _ a => eval_arg_ty a
  end.

Fixpoint eval_arg_tys (tys : list (@arg_ty base sort)) : Type :=
  match tys with 
  | [] => unit 
  | ty :: tys => eval_arg_ty ty * eval_arg_tys tys 
  end.

Definition eval_kind (k : kind) : Type :=
  match k with 
  | Kt m => eval_sort m 
  | Ka ty => eval_arg_ty ty 
  | Kal tys => eval_arg_tys tys
  end.

Definition eval_ctor (s : sort) (c : ctor s) : eval_arg_tys (ctor_type s c) -> eval_sort s :=
  match s as s0 return forall c : ctor s0, eval_arg_tys (ctor_type s0 c) -> eval_sort s0 with 
  | Sty => fun c =>
    match c as c0 return eval_arg_tys (ctor_type Sty c0) -> eval_sort Sty with 
    | Carr => fun '(t1, (t2, tt)) => arr t1 t2
    | Call => fun '(t, tt) => all t
    end
  | Stm => fun c =>
    match c as c0 return eval_arg_tys (ctor_type Stm c0) -> eval_sort Stm with 
    | Capp => fun '(t1, (t2, tt)) => app t1 t2 
    | Ctapp => fun '(t1, (t2, tt)) => tapp t1 t2
    | Cvt => fun '(t, tt) => vt t
    end
  | Svl => fun c =>
    match c as c0 return eval_arg_tys (ctor_type Svl c0) -> eval_sort Svl with 
    | Clam => fun '(t1, (t2, tt)) => lam t1 t2 
    | Ctlam => fun '(t, tt) => tlam t
    end
  end c.

Definition eval_var (m : sort) (i : nat) (H : wf0 (P.E_var (m := m) i)) : eval_sort m.
destruct m.
- exact (var_ty i).
- apply wf_var_inv in H. inversion H.
- exact (var_vl i).
Defined.

Fixpoint eval {k} (t : P.expr k) (Ht : wf0 t) : eval_kind k :=
  match t as t0 in P.expr k0 return wf0 t0 -> eval_kind k0 with 
  | @P.E_var _ m i => eval_var m i
  | @P.E_ctor _ m c al => fun H => eval_ctor m c (eval al (wf_ctor_inv H)) 
  | P.E_al_nil => fun _ => tt
  | P.E_al_cons a al => fun H => (eval a (wf_al_cons_inv1 H), eval al (wf_al_cons_inv2 H))
  | P.E_abase b x => fun _ => x 
  | P.E_aterm t => fun H => eval t (wf_aterm_inv H)
  | P.E_abind m a => fun H => eval a (wf_abind_inv H)
  end Ht.

(*********************************************************************************)
(** *** Proof of bijection. *)
(*********************************************************************************)

Lemma eval_reify_ty (t : ty) (H : wf (reify_ty t)) : 
  eval (reify_ty t) H = t.
Proof. induction t ; cbn ; f_equal ; auto. Qed.

Lemma eval_reify_tm : 
  (forall t (H : wf (reify_tm t)), eval (reify_tm t) H = t) /\ 
  (forall v (H : wf (reify_vl v)), eval (reify_vl v) H = v).
Proof. apply tm_vl_ind. all: intros ; cbn ; f_equal ; auto using eval_reify_ty. Qed.

(*********************************************************************************)
(** *** Transporting renamings. *)
(*********************************************************************************)
  
Definition eval_vren_type (m : sort) : Type :=
  match m with 
  | Sty => ren 
  | Stm => ren * ren 
  | Svl => ren * ren
  end.

Definition eval_vren m (r : P.vren) : eval_vren_type m :=
  match m with 
  | Sty => r Sty 
  | Stm => (r Sty, r Svl)
  | Svl => (r Sty, r Svl)
  end.

(** Evaluate [P.rename m] into a concrete function such as [rename_ty] or [rename_tm]. *)
Definition eval_rename m : eval_vren_type m -> eval_sort m -> eval_sort m :=
  match m as m0 return eval_vren_type m0 -> eval_sort m0 -> eval_sort m0 with 
  | Sty => fun rty t => rename_ty rty t
  | Stm => fun '(rty, rvl) t => rename_tm rty rvl t
  | Svl => fun '(rty, rvl) t => rename_vl rty rvl t
  end.

(** Push [eval] through renamings. *)
Lemma push_eval_rename {m} (r : P.vren) (t : P.expr (Kt m)) (H : wf t) (H' : wf (P.rename r t)) : 
  eval (P.rename r t) H' = eval_rename m (eval_vren m r) (eval t H).
Proof.
revert r H H'. pattern t. revert m t. apply custom_ind.
all: intros ; cbn in * ; f_equal.
all: try solve [ apply H | apply H0 ].
- destruct m ; cbn.
  + reflexivity.
  + exfalso. now apply wf_var_inv in H.
  + reflexivity.    
- apply (H0 (@P.vrup sig Svl r)).
- apply (H (@P.vrup sig Sty r)).
Qed. 

(*********************************************************************************)
(** *** Transporting substitutions. *)
(*********************************************************************************)

(** Evaluate a single substitution. *)
Definition eval_subst {m} (s : P.subst m) (H : wf0_subst s) : subst (eval_sort m) :=
  fun i => eval (s i) (H i).

Definition eval_vsubst_type (m : sort) : Type :=
  match m with 
  | Sty => subst ty  
  | Stm => subst ty * subst vl 
  | Svl => subst ty * subst vl
  end.

(** Evaluate a vector of substitutions. *)
Definition eval_vsubst m (s : P.vsubst) (H : wf0_vsubst s m) : eval_vsubst_type m :=
  match m as m0 return wf0_vsubst s m0 -> eval_vsubst_type m0 with 
  | Sty => fun H => eval_subst (s Sty) (H Sty SI SI)
  | Stm => fun H => (eval_subst (s Sty) (H Sty SI SI), eval_subst (s Svl) (H Svl SI SI))
  | Svl => fun H => (eval_subst (s Sty) (H Sty SI SI), eval_subst (s Svl) (H Svl SI SI))
  end H.

(** Evaluate [P.substitute m] into a concrete function such as [substitute_ty] or [substitute_tm]. *)
Definition eval_substitute m : eval_vsubst_type m -> eval_sort m -> eval_sort m :=
  match m as m0 return eval_vsubst_type m0 -> eval_sort m0 -> eval_sort m0 with 
  | Sty => fun sty t => substitute_ty sty t
  | Stm => fun '(sty, svl) t => substitute_tm sty svl t
  | Svl => fun '(sty, svl) t => substitute_vl sty svl t
  end.

(** Push [eval] through substitutions. *)
Lemma push_eval_substitute {m} (s : P.vsubst) (t : P.expr (Kt m)) 
  (Hs : wf0_vsubst s m) (Ht : wf t) (Hst : wf0 (P.substitute s t)) :
  eval (P.substitute s t) Hst = eval_substitute m (eval_vsubst m s Hs) (eval t Ht).
Proof.
revert s Hs Ht Hst. pattern t. revert m t. apply custom_ind.
all: intros ; cbn in * ; f_equal.
all: try solve [ apply H | apply H0 ].
- destruct m ; cbn.
  + reflexivity.
  + exfalso. now apply wf_var_inv in Ht.
  + reflexivity.    
- unshelve setoid_rewrite (H (@P.vsup sig Sty s)).
  + now apply wf_vsup.
  + now apply wf_ctor_inv, wf_al_cons_inv1, wf_abind_inv, wf_aterm_inv in Ht.
  + f_equal. admit.  
- setoid_rewrite (H0 s). apply substitute_ty_proper. reflexivity. (* ok... *) 
Admitted.