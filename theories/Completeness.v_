From Sulfur Require Import Prelude Sig LevelTwo LevelTwoSimp.
From Sulfur Require LevelOne.
Module O := LevelOne.


Section WithSignature.
Context {sig : signature}.

(*

?i[?i . r] =q= ?i[0 . r]
?i[?i[t . r1] . r2] =q= ?i[t . r2]

?i[?i . rshift] =q= ?i

?i[0 . (?i . rshift^2)] =q= ?i[0 . rshift] =q= ?i

(Var ?i)[Var ?i . s] =t= (Var ?i)[Var 0 . s]

i[?r >> [ i[?r] . rshift]] =q= i[?r]

*)

(*********************************************************************************)
(** *** Semantic equality. *)
(*********************************************************************************)

Definition sem_qnat_eq (i1 i2 : qnat) : Prop :=
  forall e, qeval e i1 = qeval e i2.
#[local] Notation "i1 '=q=' i2" := (sem_qnat_eq i1 i2) 
  (at level 70, no associativity).

#[local] Instance sem_qnat_equiv : Equivalence sem_qnat_eq.
Proof. 
constructor.
- intros ??. triv.
- intros ????. triv.
- intros ??????. etransitivity ; eauto.
Qed.

Definition sem_ren_eq (r1 r2 : ren) : Prop :=
  forall e, reval e r1 =₁ reval e r2.
#[local] Notation "r1 '=r=' r2" := (sem_ren_eq r1 r2) 
  (at level 70, no associativity).

#[local] Instance sem_ren_equiv : Equivalence sem_ren_eq.
Proof. 
constructor.
- intros ??. triv.
- intros ????. triv.
- intros ??????. etransitivity ; eauto.
Qed.

(*********************************************************************************)
(** *** Elementary properties of renamings. *)
(*********************************************************************************)

Definition triv_env : env :=
  Build_env (fun _ => 0) (fun _ => P.rid) (fun _ => O.E_var 0) (fun _ => O.sid). 

Definition qnat_env (f : mvar -> nat) : env :=
  Build_env f (fun _ => P.rid) (fun _ => O.E_var 0) (fun _ => O.sid).

Definition ren_env (f : mvar -> P.ren) : env :=
  Build_env (fun _ => 0) f (fun _ => O.E_var 0) (fun _ => O.sid).
  
Definition qnat_ren_env (f : mvar -> nat) (g : mvar -> P.ren) : env :=
  Build_env f g (fun _ => O.E_var 0) (fun _ => O.sid).

Equations rlim : nat -> ren -> nat -> nat :=
rlim _ R_id i := i ;
rlim _ R_shift i := S i ;
rlim m (R_cons _ r) i := rlim m r (pred i) ;
rlim m (R_comp r1 r2) i with r1 := {
  | R_shift => rlim m r2 (S i)
  | R_mvar _ => rlim m r2 (i + m)
  | _ => 0 (* Should not happen. *) } ;
rlim m (R_mvar _) i := i + m.

Equations rbound : ren -> nat :=
rbound (R_cons _ r) := S (rbound r) ;
rbound (R_comp r1 r2) with r1 := {
  | R_shift => pred (rbound r2) ;
  | _ => rbound r2 } ;
rbound _ := 0.

(** After [rbound r], [reval (qnat_env f) r] 
    behaves as [rlim 0 r]. *)
Lemma rlim_spec m f r (Hr : rirreducible r) :
  forall i, rbound r <= i -> reval (qnat_ren_env f (fun _ => add m)) r i = rlim m r i.
Proof.
revert Hr. pattern r. apply ren_ind with (P := fun _ => True).
all: intros ; simp qeval rlim rbound in * ; triv.
- rewrite rirreducible_cons in Hr. destruct i as [|i] ; [lia|]. simpl.
  rewrite <-H0 ; solve [lia | triv]. 
- clear r. rewrite rirreducible_comp in Hr. 
  destruct r0 ; simp rbound rlim in * ; triv.
  + rewrite <-H0 ; solve [lia | triv].
  + exfalso. destruct Hr as (_ & _ & _ & Hr & _). triv.
  + exfalso. destruct Hr as (_ & _ & Hr & _). triv.
  + cbv [P.rcomp]. simp qeval. cbn. rewrite H0 ; triv.
    * f_equal. lia.
    * lia.
- cbn. lia. 
Qed.

Lemma rlim_pos m r (Hr : rirreducible r) :
  forall i, rbound r < i -> 0 < rlim m r i.
Proof.
revert Hr. pattern r. apply ren_ind with (P := fun _ => True) ; clear r.
all: try solve [ intros ; triv ].
- intros q _ r' IH Hirred i H. simp rlim rbound in *. apply IH.
  + rewrite rirreducible_cons in Hirred. triv. 
  + lia.
- intros r1 IH1 r2 IH2 Hirred i H. rewrite rirreducible_comp in Hirred.
  destruct r1 ; simp rlim rbound in * ; triv.
  + apply IH2 ; [triv | lia].
  + exfalso. destruct Hirred as (_ & _ & _ & Hr & _). triv.
  + exfalso. destruct Hirred as (_ & _ & Hr & _ & _). triv.
  + apply IH2 ; triv. lia.
- intros m' _ i Hi. simp rlim. lia. 
Qed.

Lemma rlim_non_zero m r (Hr : rirreducible r) :
  forall i, rbound r < i -> rlim m r i <> 0.
Proof. intros i H. generalize (rlim_pos m r Hr i H). lia. Qed.

(*********************************************************************************)
(** *** The big induction. *)
(*********************************************************************************)


(** A modified notion of size. *)
Equations qsize : qnat -> nat :=
qsize Q_zero := 0 ;
qsize (Q_rapply r i) := S (rsize r + qsize i) ;
qsize (Q_succ i) := S (qsize i) ;
qsize (Q_mvar _) := 0

with rsize : ren -> nat :=
rsize R_id := 0 ;
rsize R_shift := 0 ;
rsize (R_cons i r) := S (S (qsize i + rsize r)) ;
rsize (R_comp r1 r2) := S (rsize r1 + rsize r2) ;
rsize (R_mvar _) := 0.

(** [qmvar_free i] asserts that [i] does not contain any _quoted natural_ 
    metavariables (it can still contain renaming metavariables). *)
Inductive qmvar_free : qnat -> Prop :=
| qmvar_free_zero : qmvar_free Q_zero 
| qmvar_free_succ i : qmvar_free i -> qmvar_free (Q_succ i)
| qmvar_free_rapply r i : rmvar_free r -> qmvar_free i -> qmvar_free (Q_rapply r i)

(** [rmvar_free r] asserts that [r] does not contain any _quoted natural_ 
    metavariables (it can still contain renaming metavariables). *)
with rmvar_free : ren -> Prop :=
| rmvar_free_id : rmvar_free R_id 
| rmvar_free_shift : rmvar_free R_shift
| rmvar_free_cons i r : qmvar_free i -> rmvar_free r -> rmvar_free (R_cons i r)
| rmvar_free_comp r1 r2 : rmvar_free r1 -> rmvar_free r2 -> rmvar_free (R_comp r1 r2)
| rmvar_free_mvar m : rmvar_free (R_mvar m). 

Derive Signature for qmvar_free rmvar_free.

#[local] Hint Constructors qmvar_free rmvar_free : core.

(** The property on quoted naturals that we will prove by induction. *)
Definition Pq (i1 i2 : qnat) : Prop :=
  qmvar_free i1 -> qmvar_free i2 -> 
  qirreducible i1 -> qirreducible i2 -> 
  i1 =q= i2 -> i1 = i2.

(** The property on renamings that we will prove by induction. *)
Definition Pr (r1 r2 : ren) : Prop :=
  rmvar_free r1 -> rmvar_free r2 ->
  rirreducible r1 -> rirreducible r2 -> 
  r1 =r= r2 -> r1 = r2.

(** First induction hypothesis for quoted naturals. *)
Definition IHq1 (i1 i2 : qnat) : Prop := 
  forall i1' i2', qsize i1' + qsize i2' < qsize i1 + qsize i2 -> Pq i1' i2'.

(** Second induction hypothesis for quoted naturals. *)  
Definition IHq2 (i1 i2 : qnat) : Prop := 
  forall r1' r2', rsize r1' + rsize r2' < qsize i1 + qsize i2 -> Pr r1' r2'.

(** First induction hypothesis for renamings. *)
Definition IHr1 (r1 r2 : ren) : Prop := 
  forall i1' i2', qsize i1' + qsize i2' < rsize r1 + rsize r2 -> Pq i1' i2'.

(** Second induction hypothesis for renamings. *)  
Definition IHr2 (r1 r2 : ren) : Prop := 
  forall r1' r2', rsize r1' + rsize r2' < rsize r1 + rsize r2 -> Pr r1' r2'.

(*********************************************************************************)
(** *** Discriminating quoted naturals. *)
(*********************************************************************************)

(*Lemma qeq_zero_rapply_1 r m (H : qirreducible (Q_rapply r (Q_mvar m))) : 
  ~ Q_zero =q= Q_rapply r (Q_mvar m).
Proof.
rewrite qirreducible_rapply in H.
intros H1. specialize (H1 (qnat_ren_env (fun _ => S (rbound r)) (fun _ => add 0))). 
simp qeval in H1. cbn [assign_qnat qnat_ren_env] in H1.
rewrite rlim_spec in H1 ; triv. 
symmetry in H1. apply rlim_non_zero in H1 ; triv.
Qed.*)

Lemma qeq_rapply_rapply r1 r2 i1 i2 :
  IHq1 (Q_rapply r1 i1) (Q_rapply r2 i2) -> IHq2 (Q_rapply r1 i1) (Q_rapply r2 i2) ->
  Pq (Q_rapply r1 i1) (Q_rapply r2 i2).
Proof.
intros IH1 IH2 H1 H2 H3 H4 H. 
assert (i1 = Q_zero) as ->.
{ rewrite qirreducible_rapply in H3. depelim H1. destruct i1 ; triv.
  - destruct H3 as (_ & H3 & _). now apply qirreducible_succ in H3.
  - exfalso. destruct H3 as (_ & _ & _ & H3 & _). triv. }
assert (i2 = Q_zero) as ->.
{ rewrite qirreducible_rapply in H4. depelim H2. destruct i2 ; triv.
  - destruct H4 as (_ & H4 & _). now apply qirreducible_succ in H4.
  - exfalso. destruct H4 as (_ & _ & _ & H4 & _). triv. }
(* Still seems non trivial. *)
Admitted.

(*

(rmvar m >> r1) n1 =q= (rmvar m >> r2) n2

(m 0 . shift) (m 0) = m 0

if m 0 = 0 then (0 . shift) 0 = 0 ---> OK
if m 0 = S n then (S n . shift) (S n) = S n ---> OK

*)


(**

Lemma 1 r n k : k > 0 -> rirreducible (r (n + k)) -> ~ r (n + k) =q= n 
by induction on r.


Lemma 2 r n k : rirreducible (r n) -> r n =q= n + k -> r = shift^k

i.e. Q_rapply (rshift^n >> r) Q_zero =q= n + k

by induction on r.
- r = R_id : irreductibility
- r = R_shift : 
    stmt is n + 1 = n + k 
    thus k = 1 OK
- r = R_shift >> r' :
    stmt is r' (n + 1) = n + k 
    if k > 0: r' (n+1) = (n+1) + (k-1)
      by IH we have r' = rshift^(k-1)
      thus r = rshift^k
    if k = 0: r' (n+1) = n
      lemma 1
- r = R_cons : irreductivility.
- r = R_mvar : OK (just choose r wisely)
- r = R_mvar >> r' :
   choose the mvar to be big enough, and R_mvar >> r' goes to infinity.

Lemma 3 r n k : 


- r = R_id : impossible (irreductibility).
- r = R_shift : two evaluated sides are not equal.
- r = R_mvar _ : evaluate r as P.rshift, ok.
- r = rshift >> r' : 

r1 0 =q= r2 0

Case 1: rshift 0 =q= r2 0



*)


Lemma qeq_zero_rapply_1 m : Pq Q_zero (Q_rapply (R_mvar m) Q_zero).
Proof.
intros _ _ _ H H1. specialize (H1 (ren_env (fun _ => P.rshift))). simp qeval in H1.
cbn [assign_ren ren_env] in H1. triv.
Qed.

Lemma qeq_zero_rapply_2 m r : Pq Q_zero (Q_rapply (R_comp (R_mvar m) r) Q_zero).
Proof.
intros _ _ _ H H1.
assert (Hr : rirreducible r).
{ rewrite qirreducible_rapply in H. destruct H as (H & _). 
  rewrite rirreducible_comp in H. triv. }
specialize (H1 (qnat_ren_env (fun _ => 0) (fun _ => add (S (rbound r))))).
simp qeval in H1. cbn [assign_ren qnat_ren_env] in H1. cbv [P.rcomp] in H1. 
rewrite rlim_spec in H1 ; [|triv|lia]. 
symmetry in H1. apply rlim_non_zero in H1 ; triv. lia.
Qed.

(*********************************************************************************)
(** *** Discriminating renamings. *)
(*********************************************************************************)

(** Head of a renaming. *)
Equations rhead : ren -> qnat :=
rhead (R_cons i r) := i ;
rhead R_id := Q_zero ;
rhead r := Q_rapply r Q_zero.

Lemma rhead_irreducible r : 
  rirreducible r -> qirreducible (rhead r).
Proof.
intros H. funelim (rhead r).
- apply qirreducible_zero.
- rewrite qirreducible_rapply. split5 ; triv. apply qirreducible_zero.
- rewrite rirreducible_cons in H. triv.
- rewrite rirreducible_comp in H. rewrite qirreducible_rapply. split5 ; triv.
  + now rewrite rirreducible_comp.
  + now apply qirreducible_zero.
- rewrite qirreducible_rapply. split5 ; triv. now apply qirreducible_zero.
Qed.       

(** Tail of a renaming. *)
Equations rtail : ren -> ren :=
rtail (R_cons i r) := r ;
rtail R_id := R_shift ;
rtail r := R_comp R_shift r.

Lemma rtail_irreducible r : 
  rirreducible r -> rirreducible (rtail r).
Proof.
intros H. funelim (rtail r).
- apply rirreducible_shift.
- rewrite rirreducible_comp ; triv.
- rewrite rirreducible_cons in H ; triv.
- rewrite rirreducible_comp. split7 ; triv. now apply rirreducible_shift.
- rewrite rirreducible_comp. split7 ; triv. now apply rirreducible_shift.
Qed.     

Lemma req_cons_helper i r r' : R_cons i r =r= r' -> i =q= rhead r' /\ r =r= rtail r'.
Proof.
intros H. split.
- intros e. specialize (H e 0). simp qeval in H. cbv [P.rcons] in H.
  funelim (rhead r') ; triv.
- intros e n. specialize (H e (S n)). simp qeval rcons in H.
  funelim (rtail r') ; triv.
Qed.

Lemma req_cons_patt r : 
  r = R_id \/ (exists i' r', r = R_cons i' r') \/ (~is_rcons r /\ r <> R_id).
Proof.
destruct r ; triv.
- right ; right. triv.
- right ; right. triv.  
- right ; right. triv.
Qed.

Lemma req_cons i r r' : 
  IHr1 (R_cons i r) r' -> IHr2 (R_cons i r) r' ->  Pr (R_cons i r) r'.
Proof.
intros IH1 IH2 H1 H2 H3 H4 H5. destruct (req_cons_helper _ _ _ H5) as [Hhead Htail]. 
destruct (req_cons_patt r') as [-> | [ (i' & r'' & ->) | (H6 & H7) ]] ; simp rhead rtail in *.
- rewrite rirreducible_cons in H3. depelim H1. 
  assert (i = Q_zero) as ->.
  { apply IH1 ; triv.
    - simp qsize. lia. 
    - now apply qirreducible_zero. }
  assert (r = R_shift) as ->.
  { apply IH2 ; triv.
    - simp qsize. lia.
    - now apply rirreducible_shift. }
  exfalso. destruct H3 as (_ & _ & H3 & _). triv.
- rewrite rirreducible_cons in H3, H4. depelim H1. depelim H2.
  assert (i = i') as ->. { apply IH1 ; triv. simp qsize. lia. }
  assert (r = r'') as ->. { apply IH2 ; triv. simp qsize. lia. }
  reflexivity.
- rewrite rirreducible_cons in H3. depelim H1.
  assert (i = Q_rapply r' Q_zero) as ->.
  { apply IH1 ; triv.
    - simp qsize. lia.
    - rewrite qirreducible_rapply. split5 ; triv. now apply qirreducible_zero.
    - destruct r' ; triv. }
  assert (r = R_comp R_shift r') as ->.
  { apply IH2 ; triv.
    - simp qsize. lia.
    - rewrite rirreducible_comp. split7 ; triv. now apply rirreducible_shift.
    - destruct r' ; triv. }
  destruct H3 as (_ & _ & _ & H3). exfalso. apply H3. triv.
Qed.
  
Lemma req_shift_id : Pr R_id R_shift.
Proof. intros _ _ _ _ H. specialize (H triv_env 0). triv. Qed.

Lemma req_mvar_id m : Pr R_id (R_mvar m).
Proof. intros _ _ _ _ H. specialize (H (ren_env (fun _ => P.rshift)) 0). triv. Qed. 

Lemma req_mvar_shift m : Pr R_shift (R_mvar m).
Proof. intros _ _ _ _ H. specialize (H (ren_env (fun _ => P.rid)) 0). triv. Qed. 

Lemma req_mvar_mvar m1 m2 : Pr (R_mvar m1) (R_mvar m2).
Proof.
intros _ _ _ _ H. destruct (PeanoNat.Nat.eqb_spec m1 m2) ; triv.
exfalso. pose (f m := if m =? m1 then P.rid else P.rshift). 
specialize (H (ren_env f)). simp qeval in H. cbv [ren_env assign_ren] in H.
unfold f in H. destruct (PeanoNat.Nat.eqb_spec m2 m1), (PeanoNat.Nat.eqb_spec m1 m1) ; triv.
specialize (H 0). triv. 
Qed.


(*

~ mvar m >> r =r= R_id

forall e i, reval e r (reval e m i) = i

*)
(*

forall r, r =r= add n -> r = rshift^n

rid =r= add n -> n = 0 ok
rshift =r= add n -> n = 1 ok
rmvar =r= add n -> ok
rmvar >> r =r= add n -> 
rshift >> r =r= add n -> by induction on r




*)


Lemma req_comp_id r1 r2 (Hirred : rirreducible (R_comp r1 r2)) : 
  ~ R_id =r= R_comp r1 r2.
Proof.
intros H. rewrite rirreducible_comp in Hirred. destruct r1 ; triv.
-  

Lemma req_shift_1 r r' : 
  R_comp R_shift r =r= R_comp R_shift r' -> r =r= r'.
Proof.
intros H e i. specialize (H e (S i)). simp qeval in H. cbv [P.rcomp rshift] in H.



(*

forall e, eval e (Q_rapply r1 (Q_mvar m)) = eval e (Q_rapply r2 (Q_mvar m))
-->
forall e, eval e r (e m) = eval e 

*)

(*

Q_zero --- Q_rapply (R_mvar m) Q_zero 
--> take e[m] := rshift

Q_zero --- Q_rapply (R_comp R_mvar r) Q_zero  --> OK
Q_zero --- Q_rapply (R_comp R_shift _) Q_zero --> OK

--> show : forall k, exists e, Q_rapply (R_mvar m) k > 0
     and : forall k, exists e, Q_rapply (R_comp (R_mvar m) r) k > 0

*)


(*******************************************************************************)


(*Inductive rspec_base : ren -> Prop :=
| rspec_base_shift : rspec_base R_shift 
| rspec_base_mvar m : rspec_base (R_mvar m).

Inductive rspec_comp : ren -> Prop :=
| rspec_comp_base r : rspec_base r -> rspec_comp r 
| rspec_comp_shift r : rspec_comp r -> rspec_comp (R_comp R_shift r)
| rspec_comp_mvar m r : rirred r -> rspec_comp (R_comp (R_mvar m) r).

Inductive rspec_cons : ren -> Prop :=
| rspec_cons_id : rspec_cons R_id
| rspec_cons_comp r : rspec_comp r -> rspec_cons r
| rspec_cons_cons i r : qirred i -> rspec_cons r -> rspec_cons (R_cons i r).

#[local] Hint Constructors rspec_base rspec_comp rspec_cons : core.

(** The other direction does not hold. *)
Lemma rirred_spec (r : ren) : rirred r -> rspec_cons r.
Proof.
intros H. induction r in H |- * ; triv.
- rewrite rirred_cons in H. apply rspec_cons_cons ; triv. now apply IHr.
- rewrite rirred_comp in H. feed IHr1 ; triv. feed IHr2 ; triv. 
  apply rspec_cons_comp. destruct r1 ; triv.
  + apply rspec_comp_shift. destruct IHr2 ; triv. 
    destruct H as (_ & _ & _ & _ & _ & _ & H). triv.
  + destruct H as (_ & _ & _ & H & _). triv.
  + destruct H as (_ & _ & H & _). triv.
Qed.     *)

(*Lemma qeval_zero_rapply r (H1 : rirred r) (H2 : r <> R_id) :
  forall k, reval (ren_env (fun _ => P.rshift)) r k > 0.
Proof.
remember (ren_env (fun _ => P.rshift)) as e.
Admitted.*)

Lemma qeq_mvar_1 r m : 
  qirred (Q_rapply r (Q_mvar m)) -> ~ Q_mvar m =q= Q_rapply r (Q_mvar m).
Proof. Admitted.

Lemma qeq_mvar_2 r m1 m2 :
  m1 <> m2 -> qirred (Q_rapply r (Q_mvar m1)) -> ~ Q_mvar m2 =q= Q_rapply r (Q_mvar m1).
Proof. Admitted.

Lemma qeq_mvar m i (Hi : qirred i) : 
  Q_mvar m =q= i -> is_qmvar i.
Proof.
intros E. destruct i ; triv ; exfalso.
- specialize (E (qnat_env (fun _ => 1))).
  simp qeval in E. cbn in E. triv.
- destruct i ; triv.
  + admit.
  + assert (Hm : m = m0 \/ m <> m0) by lia. destruct Hm as [<- | Hm].
    * now apply qeq_mvar_1 in E.
    * apply qeq_mvar_2 in E ; triv.
Admitted.

Lemma qeq_variant i1 i2 (H1 : qirred i1) (H2 : qirred i2) : 
  i1 =q= i2 -> qvariant i1 = qvariant i2.
Proof.
intros E. destruct i1, i2 ; simp qvariant ; triv ; exfalso.
- apply (qeq_zero_rapply r i2) ; triv.
- assert (H : is_qmvar Q_zero). { eapply qeq_mvar ; triv. } triv.
- apply (qeq_zero_rapply r i1) ; triv.
- assert (H : is_qmvar (Q_rapply r i1)). { eapply qeq_mvar ; triv. } triv.
- assert (H : is_qmvar Q_zero). { eapply qeq_mvar ; triv. } triv.
- assert (H : is_qmvar (Q_rapply r i2)). { eapply qeq_mvar ; triv. } triv.
Qed. 




Equations rvariant : ren -> nat :=
rvariant R_id := 0 ;
rvariant R_shift := 1 ;
rvariant (R_cons _ _) := 2 ;
rvariant (R_comp _ _) := 3 ;
rvariant (R_mvar _) := 4.


(*Equations rofs : ren -> nat :=
rofs R_id := 

Equations rbound : ren -> nat :=
rbound R_id := 0 ;
rbound R_shift := 1 ;
rbound (R_cons _ r) := S (rscope r) ;
rbound (R_comp r1 r2) := rscope r1 + rscope r2 ;
rbound _ := 0

with rbound : ren -> nat :=


Lemma rscope_prop r : 
  rirred r ->
  exists e, forall i, rscope r <= i -> i - rscope r <= reval e r i.
Proof.
induction r ; intros H ; simp rscope.
- eexists. intros i _. simpl. cbv [rid]. lia.
- eexists. intros i Hi. simpl. cbv [rshift]. lia.
- feed IHr. { now rewrite rirred_cons in H. }
  destruct IHr as [e IHr]. exists e. intros i Hi. simp qeval. 
  destruct i as [|i] ; triv. cbv [P.rcons]. simpl. rewrite <-(IHr i) ; lia.
- rewrite rirred_comp in H. clear IHr1. feed IHr2 ; triv. destruct IHr2 as [e IHr].
  exists e. intros i Hi. destruct r1 ; simp rscope in * ; triv.
  +      
  
  feed IHr1 ; triv. feed IHr2 ; triv.
  destruct IHr1 as [e1 IHr1]. destruct IHr2 as [e2 IHr2].
  exists e2.  

(* eexists. intros i H. simpl. destruct i as [|i] ; [lia|]. apply le_n_S.*)
- exists (const_ren_env (fun _ => S)). intros i _. simpl. lia.
Admitted. *)


(*

Q_zero --- Q_rapply r Q_mvar  --> OK
Q_zero --- Q_rapply (R_comp R_mvar r) Q_zero  --> OK
Q_zero --- Q_rapply (R_comp R_shift _) Q_zero --> OK

*)

Definition const_qnat_env (f : mvar -> nat) : env :=
  Build_env f (fun _ => P.rid) (fun _ => O.E_var 0) (fun _ => O.sid). 

Definition const_ren_env (r : mvar -> P.ren) : env :=
  Build_env (fun _ => 0) r (fun _ => O.E_var 0) (fun _ => O.sid). 

Lemma test r i : 
  qirred (Q_rapply r i) -> exists e, qeval e (Q_rapply r i) <> 0.
Proof.
intros H. induction i in r, H |- * ; triv.
- destruct r ; triv.
  + rewrite qirred_rapply in H. destruct H as (H & _). destruct r1 ; triv.
    * admit.
    * eexists. simp qeval. cbv [P.rcomp].
      cbn [const_ren_env].
     admit.
  + exists (const_ren_env (fun _ => 1)). simp qeval. triv. 
- eexists. simp qeval. (const_qnat_env 1). simp qeval. cbv [assign_qnat]. cbn [const_qnat_env]. 

Lemma completeness_qvariant i1 i2 : 
  qirred i1 -> qirred i2 -> qvariant i1 <> qvariant i2 -> exists e, qeval e i1 <> qeval e i2.
Proof.
intros H1 H2 Hvar. *)

Lemma completeness_qvariant i1 i2 : 
  qirred i1 -> qirred i2 -> (forall e, qeval e i1 = qeval e i2) -> qvariant i1 = qvariant i2.
Admitted.

Lemma completeness_qnat (i1 i2 : qnat) : 
  qirred i1 -> qirred i2 -> (forall e, qeval e i1 = qeval e i2) -> i1 = i2.
Proof.
intros H1 H2 Heq.
induction i1 in i2, H1, H2, Heq |- * ; destruct i2.
all: try solve [ pose proof (Hvar := completeness_qvariant _ _ H1 H2 Heq) ; triv ].
- 
 admit.
- specialize (Heq (const_qnat_env (fun m => m))). simp qeval in Heq. cbv in Heq.
  now subst.

Lemma completeness_aux {k} (t1 t2 : expr k) : 
  eirred t1 -> eirred t2 -> (forall e, eeval e t1 = eeval e t2) -> t1 = t2.
Proof.
intros H1 H2 Heq. induction t1 in t2, H1, H2, Heq |- *.
- depelim t2.
  + f_equal. inv Heq.  rewrite eirred_tvar in H1.*)

